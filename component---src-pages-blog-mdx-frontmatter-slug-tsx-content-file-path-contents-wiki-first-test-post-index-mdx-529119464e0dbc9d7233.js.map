{"version":3,"file":"component---src-pages-blog-mdx-frontmatter-slug-tsx-content-file-path-contents-wiki-first-test-post-index-mdx-529119464e0dbc9d7233.js","mappings":"yIAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,MACFC,EAAAA,EAAAA,MAAsBL,EAAMM,YAC/B,OAAOC,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,oDAClD,CAKA,IAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOQ,QAASC,GAAaP,OAAOC,OAAO,CAAC,GAAGE,EAAAA,EAAAA,MAAsBL,EAAMM,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWT,EAAOO,EAAAA,cAAoBR,EAAmBC,IAAUD,EAAkBC,EAC9H,C,mJCPA,MAEaU,EAAO,IAAMH,EAAAA,cAAoBI,EAAAA,EAAK,CACjDC,MAHY,cAKd,SAASC,EAASC,GAChB,IAAI,KAACC,EAAI,SAAEC,GAAYF,EACvB,MAAM,MAACF,EAAK,KAAEK,EAAI,SAAEC,GAAYH,EAAKI,IAAIC,YACzC,OAAOb,EAAAA,cAAoBc,EAAAA,EAAQ,CACjCC,UAAWV,GACVL,EAAAA,cAAoBgB,EAAAA,EAAM,CAC3BN,KAAMA,EACNO,WAAYN,GACXF,GACL,CACe,SAASS,EAAiBzB,GACvC,OAAOO,EAAAA,cAAoBM,EAAUb,EAAOO,EAAAA,cAAoBmB,EAAAA,EAAqB1B,GACvF,C,+ECbe,SAASuB,EAAK,GAAwC,IAAxC,SAAEP,EAAQ,KAAEC,EAAI,WAAEO,GAAmB,EAChE,OACEjB,EAAAA,cAAAA,MAAAA,KACEA,EAAAA,cAAAA,MAAAA,CAAKoB,UAAU,qDACbpB,EAAAA,cAAAA,MAAAA,CAAKoB,UAAU,uBACZH,aAAU,EAAVA,EAAYI,KAAKV,GAChBX,EAAAA,cAACsB,EAAAA,EAAQ,CAACC,IAAKZ,EAAUa,QAASb,OAGtCX,EAAAA,cAAAA,IAAAA,CAAGoB,UAAU,wCAAwCV,IAEvDV,EAAAA,cAAAA,MAAAA,CAAKoB,UAAU,yDACZX,GAIT,C,+CCJA,IAlBYF,IAAmC,IAAlC,MAAEF,GAA0B,EACvC,MAAMG,GAAOiB,EAAAA,EAAAA,IAAe,cAU5B,OACEzB,EAAAA,cAAAA,QAAAA,KACGK,EAAM,MAAIG,EAAKkB,KAAKC,aAAatB,MAC5B,C,sECgBL,MAAMuB,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiB9B,GAC/B,MAAM+B,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAf7B,EACFA,EAAW+B,GAGb,IAAIA,KAAsB/B,IAChC,CAAC+B,EAAmB/B,GACzB,C","sources":["webpack://one-dev-blog/./contents/wiki/first-test-post/index.mdx","webpack://one-dev-blog/./src/pages/blog/{mdx.frontmatter__slug}.tsx","webpack://one-dev-blog/./src/components/post/Post.tsx","webpack://one-dev-blog/./src/components/seo.tsx","webpack://one-dev-blog/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(_components.p, null, \"This is WIKI POST. This is my first test post !!!\");\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/jiwon/Projects/Study/one-dev-blog/contents/wiki/first-test-post/index.mdx\";\nimport * as React from \"react\";\nimport Layout from \"../../components/layout\";\nimport Seo from \"../../components/seo\";\nimport Post from \"@/components/post/Post\";\nconst TITLE = \"Blog Post\";\nconst query = \"2668907663\";\nexport const Head = () => React.createElement(Seo, {\n  title: TITLE\n});\nfunction BlogPost(_ref) {\n  let {data, children} = _ref;\n  const {title, date, category} = data.mdx.frontmatter;\n  return React.createElement(Layout, {\n    pageTitle: title\n  }, React.createElement(Post, {\n    date: date,\n    categories: category\n  }, children));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPost, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","import * as React from \"react\";\nimport Category from \"../Category\";\n\ntype Props = {\n  children: React.ReactNode;\n  date: string;\n  categories?: string[];\n};\n\nexport default function Post({ children, date, categories }: Props) {\n  return (\n    <div>\n      <div className=\"flex flex-row justify-between items-center w-full\">\n        <div className=\"flex flex-row gap-1\">\n          {categories?.map((category) => (\n            <Category key={category} content={category} />\n          ))}\n        </div>\n        <p className=\"text-sm text-foreground/50 font-mono\">{date}</p>\n      </div>\n      <div className=\"prose prose-neutral dark:prose-invert max-w-none mt-8\">\n        {children}\n      </div>\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport { graphql, useStaticQuery } from \"gatsby\";\n\nconst Seo = ({ title }: { title: string }) => {\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `);\n\n  return (\n    <title>\n      {title} | {data.site.siteMetadata.title}\n    </title>\n  );\n};\n\nexport default Seo;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","_provideComponents","components","React","wrapper","MDXLayout","Head","Seo","title","BlogPost","_ref","data","children","date","category","mdx","frontmatter","Layout","pageTitle","Post","categories","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","className","map","Category","key","content","useStaticQuery","site","siteMetadata","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}